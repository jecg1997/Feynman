import L2_log as log
import L2_vector as vector
import scan_feynman as scanFeynman
import trial as trial 
import firstdrive as motors
import sys
import math
import L1_lidar as lidar
import L2_inverse_kinematics as inv_kin
import rcpy
import rcpy.motor as motor  
import argparse  
import numpy as np
import time

def get_dy(d,thetha):
    
    dis_scan = d
    angles = np.deg2rad(thetha)
    x = len(dis_scan)
    dy = np.zeros(x)
    for i in range(x):
        dy[i] = np.cos(angles[i])*dis_scan[i]
        i += 1
    return dy

def get_nearest():
    
    scan = lidar.polarScan(200) #gets 811 scans [m,thetha]        
    scan_robot = scan [62:138:1] #narrow the view 
    d = scan_robot [:,0] #get the first column of the scan
    thetha = scan_robot[:,1] #get the second column of the scan
    thetha = np.reshape(thetha,(thetha.shape[0],1)) #turn thetha into columumn
    dy = get_dy(d,thetha) #get vertical distance from the lidar to floor
    dy_reshape = np.reshape(dy,(dy.shape[0],1)) #turn dy into a column
    column_mins = np.argmin(dy,axis=0) #get the min index with the min dy value
    row_index = column_mins 
    scan_converted = np.hstack((dy_reshape,thetha)) #stack vertically [dy,thetha]
    nearest_element = scan_converted[row_index,:] #return the distance and angle of the nearest object in scan [dy_min, thetha]
    return (nearest_element)

def movetarget():
    
    res=get_nearest()
    print(res)
    while 1: 
        if res[1] in range (-100,0):
            MotorL(1)
            MotorR(-1)
            time.sleep(1)
            print(res)
        elif res[1] in range (1, 47):
            MotorL(1)
            MotorR(-1)
            time.sleep(1)
            print(res)
        elif res[1] in range (48, 53):
            MotorL(1)
            MotorR(1)
            time.sleep(0.1)
            print(res)
        elif res[1] in range (54,100):
            MotorL(1)
            MotorR(-1)
            time.sleep(0.1)
            print(res)
        else: 
            break

def targetangle():

    res=get_nearest()
    angle=res[1]
    print(angle) #print the values for get nearest in array
    duty_l = 0 # initialize motor with zero duty cycle
    duty_r = 0 #initialize motor with zero duty cycle
    distance = (res[0])  # estimates the distance to the target taking the first value of get_nearest
    print("initializing rcpy...")
    rcpy.set_state(rcpy.RUNNING)        # initialize rcpy
    print("finished initializing rcpy.")
    log.uniqueFile(distance,"distance.txt")
    log.uniqueFile(angle,"angle.txt")    

    try:
        while rcpy.get_state() != rcpy.EXITING:
            if rcpy.get_state() == rcpy.RUNNING:
                scale_t = 1.3	# a scaling factor for speeds
                scale_d = 1.3	# a scaling factor for speeds

                motor_r = 2 	# Right Motor assigned to #2
                motor_l = 1 	# Left Motor assigned to #1
                angle = res[1]
                angle = round(angle)
                dir = "driving"
                
                if angle in range (-100,-15):
                    case = "Target on Right"
                    print(angle)
                    print('far away bro')    
                    duty_r = 0.7
                    duty_l = -0.7
                    print(angle)
                elif angle in range (-14, 15):
                    case = "Straight"
                    print(angle)
                    print('Aligned')    
                    duty_r = 0
                    duty_l = 0
                elif angle in range (16, 53):
                    case = "Slightly Left"
                    print(angle)
                    print('Slightly Left')  
                    duty_r = 0.7
                    duty_l = -0.7
                elif angle in range (54,100):
                    case = "Left"
                    print(angle)
                    print('Left')    
                    duty_r = 0.7
                    duty_l = -0.7
                else: 
                    continue    

                #keep the duty cycles between (-1,1)
                if duty_r > 1:
                    duty_r = 0.7

                elif duty_r < -1:
                    duty_r = -0.7

                if duty_l > 1:
                    duty_l = 0.7

                elif duty_l < -1:
                    duty_l = -0.7
                    # Round duty cycles
                    duty_l = round(duty_l,2)
                    duty_r = round(duty_r,2)
                    # Set motor duty cycles
                    motor.set(motor_l, duty_l)
                    motor.set(motor_r, duty_r)
                    # Set motor duty cycles
                motor.set(motor_l, duty_l)
                motor.set(motor_r, duty_r)
            elif rcpy.get_state() == rcpy.PAUSED:
                pass
    except KeyboardInterrupt: # condition added to catch a "Ctrl-C" event and exit cleanly
        rcpy.set_state(rcpy.EXITING)
        pass
    finally:
    	rcpy.set_state(rcpy.EXITING)
    	print("lidar feynman")    

def targetdistance():

    res=get_nearest()
    print(res) #print the values for get nearest in array
    duty_l = 0 # initialize motor with zero duty cycle
    duty_r = 0 #initialize motor with zero duty cycle
    distance = (res[0])  # estimates the distance to the target taking the first value of get_nearest
    print("initializing rcpy...")
    angle=(res[1])
    log.uniqueFile(distance,"distance.txt")
    log.uniqueFile(angle,"angle.txt")
#    rcpy.set_state(rcpy.RUNNING)        # initialize rcpy
#    print("finished initializing rcpy.")

    try:
        while rcpy.get_state() != rcpy.EXITING:
            if rcpy.get_state() == rcpy.RUNNING:
                scale_t = 1.3	# a scaling factor for speeds
                scale_d = 1.3	# a scaling factor for speeds

                motor_r = 2 	# Right Motor assigned to #2
                motor_l = 1 	# Left Motor assigned to #1
                
                dir = "driving"
                if distance < 0.200: 
                    case = "tooclose"
                    print('Subject too close')
                    print(distance)
                    duty = -0.7
                    duty_r = -0.7
                    duty_l = -0.7
                    time.sleep(1)
                elif distance > 0.400:
                    case = "toofar"
                    print(distance)
                    print('Approaching the Subject')     # Too Far       - Minimum pixel size of object to track
                    duty = 0.7
                    duty_r = 0.7
                    duty_l = 0.7
                    time.sleep(1)
                    
                elif ((distance > 0.250) and (distance < 0.350)):
                    case = "perfectbrah"
                    print(distance)
                    print('Subject Reached')     # Target Pixels - Target size of object to track
                    duty_r = 0
                    duty_l = 0                        
                    time.sleep(1)
                else:
                    break
                #keep the duty cycles between (-1,1)
                if duty_r > 1:
                    duty_r = 0.8
                elif duty_r < -1:
                    duty_r = -0.8
                if duty_l > 1:
                    duty_l = 0.8
                elif duty_l < -1:
                    duty_l = -0.8
                   # Round duty cycles
                    duty_l = round(duty_l,2)
                    duty_r = round(duty_r,2)
                   # Set motor duty cycles
                    motor.set(motor_l, duty_l)
                    motor.set(motor_r, duty_r)
                    # Set motor duty cycles
                motor.set(motor_l, duty_l)
                motor.set(motor_r, duty_r)
            elif rcpy.get_state() == rcpy.PAUSED:
                pass
    except KeyboardInterrupt: # condition added to catch a "Ctrl-C" event and exit cleanly
        rcpy.set_state(rcpy.EXITING)
        pass
    finally:
    	rcpy.set_state(rcpy.EXITING)
    	print("lidar feynman")

if __name__ == "__main__":

   for x in range(1):
            res= get_nearest()
            distance = res[0]
            print(distance)
            targetdistance()
            time.sleep(1)
            print(distance)
